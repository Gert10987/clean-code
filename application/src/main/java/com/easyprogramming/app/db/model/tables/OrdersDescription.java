/*
 * This file is generated by jOOQ.
 */
package com.easyprogramming.app.db.model.tables;


import com.easyprogramming.app.db.model.Keys;
import com.easyprogramming.app.db.model.ScannerApp;
import com.easyprogramming.app.db.model.tables.records.OrdersDescriptionRecord;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersDescription extends TableImpl<OrdersDescriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scanner_app.orders_description</code>
     */
    public static final OrdersDescription ORDERS_DESCRIPTION = new OrdersDescription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersDescriptionRecord> getRecordType() {
        return OrdersDescriptionRecord.class;
    }

    /**
     * The column <code>scanner_app.orders_description.order_id</code>.
     */
    public final TableField<OrdersDescriptionRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>scanner_app.orders_description.items</code>.
     */
    public final TableField<OrdersDescriptionRecord, JSON> ITEMS = createField(DSL.name("items"), SQLDataType.JSON, this, "");

    private OrdersDescription(Name alias, Table<OrdersDescriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrdersDescription(Name alias, Table<OrdersDescriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>scanner_app.orders_description</code> table
     * reference
     */
    public OrdersDescription(String alias) {
        this(DSL.name(alias), ORDERS_DESCRIPTION);
    }

    /**
     * Create an aliased <code>scanner_app.orders_description</code> table
     * reference
     */
    public OrdersDescription(Name alias) {
        this(alias, ORDERS_DESCRIPTION);
    }

    /**
     * Create a <code>scanner_app.orders_description</code> table reference
     */
    public OrdersDescription() {
        this(DSL.name("orders_description"), null);
    }

    public <O extends Record> OrdersDescription(Table<O> child, ForeignKey<O, OrdersDescriptionRecord> key) {
        super(child, key, ORDERS_DESCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScannerApp.SCANNER_APP;
    }

    @Override
    public UniqueKey<OrdersDescriptionRecord> getPrimaryKey() {
        return Keys.ORDERS_DESCRIPTION_PKEY;
    }

    @Override
    public OrdersDescription as(String alias) {
        return new OrdersDescription(DSL.name(alias), this);
    }

    @Override
    public OrdersDescription as(Name alias) {
        return new OrdersDescription(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersDescription rename(String name) {
        return new OrdersDescription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersDescription rename(Name name) {
        return new OrdersDescription(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
