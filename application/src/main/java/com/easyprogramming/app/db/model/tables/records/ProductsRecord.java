/*
 * This file is generated by jOOQ.
 */
package com.easyprogramming.app.db.model.tables.records;


import com.easyprogramming.app.db.model.enums.Currency;
import com.easyprogramming.app.db.model.tables.Products;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductsRecord extends UpdatableRecordImpl<ProductsRecord> implements Record5<UUID, String, LocalDateTime, BigDecimal, Currency> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>scanner_app.products.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>scanner_app.products.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>scanner_app.products.type</code>.
     */
    public void setType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>scanner_app.products.type</code>.
     */
    public String getType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>scanner_app.products.expiration_date</code>.
     */
    public void setExpirationDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>scanner_app.products.expiration_date</code>.
     */
    public LocalDateTime getExpirationDate() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>scanner_app.products.total_price</code>.
     */
    public void setTotalPrice(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>scanner_app.products.total_price</code>.
     */
    public BigDecimal getTotalPrice() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>scanner_app.products.currency</code>.
     */
    public void setCurrency(Currency value) {
        set(4, value);
    }

    /**
     * Getter for <code>scanner_app.products.currency</code>.
     */
    public Currency getCurrency() {
        return (Currency) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, LocalDateTime, BigDecimal, Currency> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, String, LocalDateTime, BigDecimal, Currency> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Products.PRODUCTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Products.PRODUCTS.TYPE;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Products.PRODUCTS.EXPIRATION_DATE;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Products.PRODUCTS.TOTAL_PRICE;
    }

    @Override
    public Field<Currency> field5() {
        return Products.PRODUCTS.CURRENCY;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getType();
    }

    @Override
    public LocalDateTime component3() {
        return getExpirationDate();
    }

    @Override
    public BigDecimal component4() {
        return getTotalPrice();
    }

    @Override
    public Currency component5() {
        return getCurrency();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getType();
    }

    @Override
    public LocalDateTime value3() {
        return getExpirationDate();
    }

    @Override
    public BigDecimal value4() {
        return getTotalPrice();
    }

    @Override
    public Currency value5() {
        return getCurrency();
    }

    @Override
    public ProductsRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ProductsRecord value2(String value) {
        setType(value);
        return this;
    }

    @Override
    public ProductsRecord value3(LocalDateTime value) {
        setExpirationDate(value);
        return this;
    }

    @Override
    public ProductsRecord value4(BigDecimal value) {
        setTotalPrice(value);
        return this;
    }

    @Override
    public ProductsRecord value5(Currency value) {
        setCurrency(value);
        return this;
    }

    @Override
    public ProductsRecord values(UUID value1, String value2, LocalDateTime value3, BigDecimal value4, Currency value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductsRecord
     */
    public ProductsRecord() {
        super(Products.PRODUCTS);
    }

    /**
     * Create a detached, initialised ProductsRecord
     */
    public ProductsRecord(UUID id, String type, LocalDateTime expirationDate, BigDecimal totalPrice, Currency currency) {
        super(Products.PRODUCTS);

        setId(id);
        setType(type);
        setExpirationDate(expirationDate);
        setTotalPrice(totalPrice);
        setCurrency(currency);
    }
}
